/*
 * Copyright (c) 2007-2015 Concurrent, Inc. All Rights Reserved.
 *
 * Project and contact information: http://www.cascading.org/
 *
 * This file is part of the Cascading project.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'java-library'
  id 'maven-publish'
  id 'signing'
  id 'idea'
  id 'eclipse'
  id "io.github.gradle-nexus.publish-plugin" version '1.0.0'
}

apply from: 'etc/version.gradle'
apply from: 'etc/s3Upload.gradle'

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven {url = 'https://repository.apache.org'}
}

ext.distDir = mkdir( "${rootDir}/build/dist" )

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = 'net.wensel'
version = releaseVersion

// generate Java 9 module names
ext.moduleName = name.replaceAll( '-', '.' )

dependencies {
  testImplementation group: 'junit', name: 'junit', version: '4.11'
}

configurations {
  testArtifacts {
    extendsFrom testRuntimeClasspath
  }
}

jar {
  inputs.property( "moduleName", moduleName )
  manifest {
    attributes( 'Automatic-Module-Name': moduleName )
  }
}

javadoc {
  def copyright = '<i>Copyright &#169; 2007-2015 Concurrent, Inc. All Rights Reserved.</i>'

  failOnError = false

  title = "Riffle ${releaseVersion}"
  destinationDir = file( "${distDir}/javadoc/${project.name}" )

  configure( options ) {
    linkSource = true
    encoding = "UTF8"
    bottom = copyright
  }
}

task sourcesJar( type: Jar, dependsOn: classes ) {
  from sourceSets.main.allSource
  archiveClassifier = 'sources'
}

task javadocJar( type: Jar, dependsOn: javadoc ) {
  from javadoc
  archiveClassifier = 'javadoc'
}

task testsJar( type: Jar, dependsOn: testClasses ) {
  from sourceSets.test.output
  archiveClassifier = 'tests'
}

task testSourcesJar( type: Jar, dependsOn: classes ) {
  from sourceSets.test.allSource
  archiveClassifier = 'test-sources'
}

artifacts {
  archives jar
  archives sourcesJar
  archives javadocJar
  archives testsJar
  archives testSourcesJar
  testArtifacts testsJar
  testArtifacts testSourcesJar
}

test {
  include '**/*Test.class'
}

task prepareRelease( type: Copy, dependsOn: 'build' ) {

  s3UploadDocs.dependsOn << prepareRelease

  // copy dist and apply any analytics scripts
  def analytics = System.getProperty( 'publish.docs.analytics', '' )

  from "${distDir}/javadoc/"
  into "${s3UploadDocs.source}/javadoc/"

  filter {line ->
    line.replaceAll( "</BODY>", "${analytics}\n</BODY>" ).replaceAll( "</body>", "${analytics}\n</body>" )
  }
}

prepareRelease {
  doLast {
    logger.info( 'built all artifacts' )
  }
}

s3UploadArtifacts.enabled = false // we aren't packaging anything

publishing {
  repositories {
    maven {
      name = "GitHubPackages"
      url = uri( "https://maven.pkg.github.com/cwensel/riffle" )
      credentials {
        username = repoUserName ?: System.getenv( "GPR_USERNAME" )
        password = repoPassword ?: System.getenv( "GPR_TOKEN" )
      }
    }
  }

  // publish wips via publishAllPublicationsToGitHubPackagesRepository
  publications {
    maven( MavenPublication ) {
      artifact sourcesJar
      artifact javadocJar
      artifact testsJar
      artifact testSourcesJar

      from components.java

      pom {
        name = 'riffle'
        description = 'An API for data management, analytics, and machine learning on parallel computing clusters.'
        url = 'http://riffle.wensel.net/'
        inceptionYear = '2007'
        developers {
          developer {
            name = 'Chris K Wensel'
            email = 'chris@wensel.net'
            url = 'https://chris.wensel.net/'
          }
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }
        scm {
          url = 'https://github.com/cwensel/riffle.git'
        }
      }
    }
  }
}

// publish releases via publishToSonatype closeAndReleaseSonatypeStagingRepository
nexusPublishing {
  repositories {
    sonatype {
      nexusUrl.set( uri( "https://s01.oss.sonatype.org/service/local/" ) )
      snapshotRepositoryUrl.set( uri( "https://s01.oss.sonatype.org/content/repositories/snapshots/" ) )

      username = repoUserName ?: System.getenv( "MCR_USERNAME" )
      password = repoPassword ?: System.getenv( "MCR_PASSWORD" )
    }
  }
}

signing {
  sign publishing.publications.maven
}
